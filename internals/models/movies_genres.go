// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MoviesGenre is an object representing the database table.
type MoviesGenre struct {
	ID      int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	MovieID null.Int `boil:"movie_id" json:"movie_id,omitempty" toml:"movie_id" yaml:"movie_id,omitempty"`
	GenreID null.Int `boil:"genre_id" json:"genre_id,omitempty" toml:"genre_id" yaml:"genre_id,omitempty"`

	R *moviesGenreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L moviesGenreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MoviesGenreColumns = struct {
	ID      string
	MovieID string
	GenreID string
}{
	ID:      "id",
	MovieID: "movie_id",
	GenreID: "genre_id",
}

var MoviesGenreTableColumns = struct {
	ID      string
	MovieID string
	GenreID string
}{
	ID:      "movies_genres.id",
	MovieID: "movies_genres.movie_id",
	GenreID: "movies_genres.genre_id",
}

// Generated where

var MoviesGenreWhere = struct {
	ID      whereHelperint
	MovieID whereHelpernull_Int
	GenreID whereHelpernull_Int
}{
	ID:      whereHelperint{field: "\"movies_genres\".\"id\""},
	MovieID: whereHelpernull_Int{field: "\"movies_genres\".\"movie_id\""},
	GenreID: whereHelpernull_Int{field: "\"movies_genres\".\"genre_id\""},
}

// MoviesGenreRels is where relationship names are stored.
var MoviesGenreRels = struct {
	Genre string
	Movie string
}{
	Genre: "Genre",
	Movie: "Movie",
}

// moviesGenreR is where relationships are stored.
type moviesGenreR struct {
	Genre *Genre `boil:"Genre" json:"Genre" toml:"Genre" yaml:"Genre"`
	Movie *Movie `boil:"Movie" json:"Movie" toml:"Movie" yaml:"Movie"`
}

// NewStruct creates a new relationship struct
func (*moviesGenreR) NewStruct() *moviesGenreR {
	return &moviesGenreR{}
}

func (r *moviesGenreR) GetGenre() *Genre {
	if r == nil {
		return nil
	}
	return r.Genre
}

func (r *moviesGenreR) GetMovie() *Movie {
	if r == nil {
		return nil
	}
	return r.Movie
}

// moviesGenreL is where Load methods for each relationship are stored.
type moviesGenreL struct{}

var (
	moviesGenreAllColumns            = []string{"id", "movie_id", "genre_id"}
	moviesGenreColumnsWithoutDefault = []string{}
	moviesGenreColumnsWithDefault    = []string{"id", "movie_id", "genre_id"}
	moviesGenrePrimaryKeyColumns     = []string{"id"}
	moviesGenreGeneratedColumns      = []string{"id"}
)

type (
	// MoviesGenreSlice is an alias for a slice of pointers to MoviesGenre.
	// This should almost always be used instead of []MoviesGenre.
	MoviesGenreSlice []*MoviesGenre
	// MoviesGenreHook is the signature for custom MoviesGenre hook methods
	MoviesGenreHook func(context.Context, boil.ContextExecutor, *MoviesGenre) error

	moviesGenreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	moviesGenreType                 = reflect.TypeOf(&MoviesGenre{})
	moviesGenreMapping              = queries.MakeStructMapping(moviesGenreType)
	moviesGenrePrimaryKeyMapping, _ = queries.BindMapping(moviesGenreType, moviesGenreMapping, moviesGenrePrimaryKeyColumns)
	moviesGenreInsertCacheMut       sync.RWMutex
	moviesGenreInsertCache          = make(map[string]insertCache)
	moviesGenreUpdateCacheMut       sync.RWMutex
	moviesGenreUpdateCache          = make(map[string]updateCache)
	moviesGenreUpsertCacheMut       sync.RWMutex
	moviesGenreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var moviesGenreAfterSelectHooks []MoviesGenreHook

var moviesGenreBeforeInsertHooks []MoviesGenreHook
var moviesGenreAfterInsertHooks []MoviesGenreHook

var moviesGenreBeforeUpdateHooks []MoviesGenreHook
var moviesGenreAfterUpdateHooks []MoviesGenreHook

var moviesGenreBeforeDeleteHooks []MoviesGenreHook
var moviesGenreAfterDeleteHooks []MoviesGenreHook

var moviesGenreBeforeUpsertHooks []MoviesGenreHook
var moviesGenreAfterUpsertHooks []MoviesGenreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MoviesGenre) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moviesGenreAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MoviesGenre) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moviesGenreBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MoviesGenre) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moviesGenreAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MoviesGenre) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moviesGenreBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MoviesGenre) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moviesGenreAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MoviesGenre) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moviesGenreBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MoviesGenre) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moviesGenreAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MoviesGenre) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moviesGenreBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MoviesGenre) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moviesGenreAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMoviesGenreHook registers your hook function for all future operations.
func AddMoviesGenreHook(hookPoint boil.HookPoint, moviesGenreHook MoviesGenreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		moviesGenreAfterSelectHooks = append(moviesGenreAfterSelectHooks, moviesGenreHook)
	case boil.BeforeInsertHook:
		moviesGenreBeforeInsertHooks = append(moviesGenreBeforeInsertHooks, moviesGenreHook)
	case boil.AfterInsertHook:
		moviesGenreAfterInsertHooks = append(moviesGenreAfterInsertHooks, moviesGenreHook)
	case boil.BeforeUpdateHook:
		moviesGenreBeforeUpdateHooks = append(moviesGenreBeforeUpdateHooks, moviesGenreHook)
	case boil.AfterUpdateHook:
		moviesGenreAfterUpdateHooks = append(moviesGenreAfterUpdateHooks, moviesGenreHook)
	case boil.BeforeDeleteHook:
		moviesGenreBeforeDeleteHooks = append(moviesGenreBeforeDeleteHooks, moviesGenreHook)
	case boil.AfterDeleteHook:
		moviesGenreAfterDeleteHooks = append(moviesGenreAfterDeleteHooks, moviesGenreHook)
	case boil.BeforeUpsertHook:
		moviesGenreBeforeUpsertHooks = append(moviesGenreBeforeUpsertHooks, moviesGenreHook)
	case boil.AfterUpsertHook:
		moviesGenreAfterUpsertHooks = append(moviesGenreAfterUpsertHooks, moviesGenreHook)
	}
}

// One returns a single moviesGenre record from the query.
func (q moviesGenreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MoviesGenre, error) {
	o := &MoviesGenre{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for movies_genres")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MoviesGenre records from the query.
func (q moviesGenreQuery) All(ctx context.Context, exec boil.ContextExecutor) (MoviesGenreSlice, error) {
	var o []*MoviesGenre

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MoviesGenre slice")
	}

	if len(moviesGenreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MoviesGenre records in the query.
func (q moviesGenreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count movies_genres rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q moviesGenreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if movies_genres exists")
	}

	return count > 0, nil
}

// Genre pointed to by the foreign key.
func (o *MoviesGenre) Genre(mods ...qm.QueryMod) genreQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GenreID),
	}

	queryMods = append(queryMods, mods...)

	return Genres(queryMods...)
}

// Movie pointed to by the foreign key.
func (o *MoviesGenre) Movie(mods ...qm.QueryMod) movieQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MovieID),
	}

	queryMods = append(queryMods, mods...)

	return Movies(queryMods...)
}

// LoadGenre allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moviesGenreL) LoadGenre(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoviesGenre interface{}, mods queries.Applicator) error {
	var slice []*MoviesGenre
	var object *MoviesGenre

	if singular {
		var ok bool
		object, ok = maybeMoviesGenre.(*MoviesGenre)
		if !ok {
			object = new(MoviesGenre)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMoviesGenre)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMoviesGenre))
			}
		}
	} else {
		s, ok := maybeMoviesGenre.(*[]*MoviesGenre)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMoviesGenre)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMoviesGenre))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moviesGenreR{}
		}
		if !queries.IsNil(object.GenreID) {
			args = append(args, object.GenreID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moviesGenreR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GenreID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GenreID) {
				args = append(args, obj.GenreID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`genres`),
		qm.WhereIn(`genres.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Genre")
	}

	var resultSlice []*Genre
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Genre")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for genres")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for genres")
	}

	if len(moviesGenreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Genre = foreign
		if foreign.R == nil {
			foreign.R = &genreR{}
		}
		foreign.R.MoviesGenres = append(foreign.R.MoviesGenres, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GenreID, foreign.ID) {
				local.R.Genre = foreign
				if foreign.R == nil {
					foreign.R = &genreR{}
				}
				foreign.R.MoviesGenres = append(foreign.R.MoviesGenres, local)
				break
			}
		}
	}

	return nil
}

// LoadMovie allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moviesGenreL) LoadMovie(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoviesGenre interface{}, mods queries.Applicator) error {
	var slice []*MoviesGenre
	var object *MoviesGenre

	if singular {
		var ok bool
		object, ok = maybeMoviesGenre.(*MoviesGenre)
		if !ok {
			object = new(MoviesGenre)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMoviesGenre)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMoviesGenre))
			}
		}
	} else {
		s, ok := maybeMoviesGenre.(*[]*MoviesGenre)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMoviesGenre)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMoviesGenre))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &moviesGenreR{}
		}
		if !queries.IsNil(object.MovieID) {
			args = append(args, object.MovieID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moviesGenreR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MovieID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MovieID) {
				args = append(args, obj.MovieID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`movies`),
		qm.WhereIn(`movies.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Movie")
	}

	var resultSlice []*Movie
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Movie")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for movies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for movies")
	}

	if len(moviesGenreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Movie = foreign
		if foreign.R == nil {
			foreign.R = &movieR{}
		}
		foreign.R.MoviesGenres = append(foreign.R.MoviesGenres, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MovieID, foreign.ID) {
				local.R.Movie = foreign
				if foreign.R == nil {
					foreign.R = &movieR{}
				}
				foreign.R.MoviesGenres = append(foreign.R.MoviesGenres, local)
				break
			}
		}
	}

	return nil
}

// SetGenre of the moviesGenre to the related item.
// Sets o.R.Genre to related.
// Adds o to related.R.MoviesGenres.
func (o *MoviesGenre) SetGenre(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Genre) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"movies_genres\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"genre_id"}),
		strmangle.WhereClause("\"", "\"", 2, moviesGenrePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GenreID, related.ID)
	if o.R == nil {
		o.R = &moviesGenreR{
			Genre: related,
		}
	} else {
		o.R.Genre = related
	}

	if related.R == nil {
		related.R = &genreR{
			MoviesGenres: MoviesGenreSlice{o},
		}
	} else {
		related.R.MoviesGenres = append(related.R.MoviesGenres, o)
	}

	return nil
}

// RemoveGenre relationship.
// Sets o.R.Genre to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MoviesGenre) RemoveGenre(ctx context.Context, exec boil.ContextExecutor, related *Genre) error {
	var err error

	queries.SetScanner(&o.GenreID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("genre_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Genre = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MoviesGenres {
		if queries.Equal(o.GenreID, ri.GenreID) {
			continue
		}

		ln := len(related.R.MoviesGenres)
		if ln > 1 && i < ln-1 {
			related.R.MoviesGenres[i] = related.R.MoviesGenres[ln-1]
		}
		related.R.MoviesGenres = related.R.MoviesGenres[:ln-1]
		break
	}
	return nil
}

// SetMovie of the moviesGenre to the related item.
// Sets o.R.Movie to related.
// Adds o to related.R.MoviesGenres.
func (o *MoviesGenre) SetMovie(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Movie) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"movies_genres\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"movie_id"}),
		strmangle.WhereClause("\"", "\"", 2, moviesGenrePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MovieID, related.ID)
	if o.R == nil {
		o.R = &moviesGenreR{
			Movie: related,
		}
	} else {
		o.R.Movie = related
	}

	if related.R == nil {
		related.R = &movieR{
			MoviesGenres: MoviesGenreSlice{o},
		}
	} else {
		related.R.MoviesGenres = append(related.R.MoviesGenres, o)
	}

	return nil
}

// RemoveMovie relationship.
// Sets o.R.Movie to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MoviesGenre) RemoveMovie(ctx context.Context, exec boil.ContextExecutor, related *Movie) error {
	var err error

	queries.SetScanner(&o.MovieID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("movie_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Movie = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MoviesGenres {
		if queries.Equal(o.MovieID, ri.MovieID) {
			continue
		}

		ln := len(related.R.MoviesGenres)
		if ln > 1 && i < ln-1 {
			related.R.MoviesGenres[i] = related.R.MoviesGenres[ln-1]
		}
		related.R.MoviesGenres = related.R.MoviesGenres[:ln-1]
		break
	}
	return nil
}

// MoviesGenres retrieves all the records using an executor.
func MoviesGenres(mods ...qm.QueryMod) moviesGenreQuery {
	mods = append(mods, qm.From("\"movies_genres\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"movies_genres\".*"})
	}

	return moviesGenreQuery{q}
}

// FindMoviesGenre retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMoviesGenre(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MoviesGenre, error) {
	moviesGenreObj := &MoviesGenre{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"movies_genres\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, moviesGenreObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from movies_genres")
	}

	if err = moviesGenreObj.doAfterSelectHooks(ctx, exec); err != nil {
		return moviesGenreObj, err
	}

	return moviesGenreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MoviesGenre) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no movies_genres provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moviesGenreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	moviesGenreInsertCacheMut.RLock()
	cache, cached := moviesGenreInsertCache[key]
	moviesGenreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			moviesGenreAllColumns,
			moviesGenreColumnsWithDefault,
			moviesGenreColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, moviesGenreGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(moviesGenreType, moviesGenreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(moviesGenreType, moviesGenreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"movies_genres\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"movies_genres\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into movies_genres")
	}

	if !cached {
		moviesGenreInsertCacheMut.Lock()
		moviesGenreInsertCache[key] = cache
		moviesGenreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MoviesGenre.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MoviesGenre) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	moviesGenreUpdateCacheMut.RLock()
	cache, cached := moviesGenreUpdateCache[key]
	moviesGenreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			moviesGenreAllColumns,
			moviesGenrePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, moviesGenreGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update movies_genres, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"movies_genres\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, moviesGenrePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(moviesGenreType, moviesGenreMapping, append(wl, moviesGenrePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update movies_genres row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for movies_genres")
	}

	if !cached {
		moviesGenreUpdateCacheMut.Lock()
		moviesGenreUpdateCache[key] = cache
		moviesGenreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q moviesGenreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for movies_genres")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for movies_genres")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MoviesGenreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moviesGenrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"movies_genres\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, moviesGenrePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in moviesGenre slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all moviesGenre")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MoviesGenre) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no movies_genres provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moviesGenreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	moviesGenreUpsertCacheMut.RLock()
	cache, cached := moviesGenreUpsertCache[key]
	moviesGenreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			moviesGenreAllColumns,
			moviesGenreColumnsWithDefault,
			moviesGenreColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			moviesGenreAllColumns,
			moviesGenrePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, moviesGenreGeneratedColumns)
		update = strmangle.SetComplement(update, moviesGenreGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert movies_genres, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(moviesGenrePrimaryKeyColumns))
			copy(conflict, moviesGenrePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"movies_genres\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(moviesGenreType, moviesGenreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(moviesGenreType, moviesGenreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert movies_genres")
	}

	if !cached {
		moviesGenreUpsertCacheMut.Lock()
		moviesGenreUpsertCache[key] = cache
		moviesGenreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MoviesGenre record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MoviesGenre) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MoviesGenre provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), moviesGenrePrimaryKeyMapping)
	sql := "DELETE FROM \"movies_genres\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from movies_genres")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for movies_genres")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q moviesGenreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no moviesGenreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from movies_genres")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for movies_genres")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MoviesGenreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(moviesGenreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moviesGenrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"movies_genres\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moviesGenrePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from moviesGenre slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for movies_genres")
	}

	if len(moviesGenreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MoviesGenre) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMoviesGenre(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MoviesGenreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MoviesGenreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moviesGenrePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"movies_genres\".* FROM \"movies_genres\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moviesGenrePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MoviesGenreSlice")
	}

	*o = slice

	return nil
}

// MoviesGenreExists checks if the MoviesGenre row exists.
func MoviesGenreExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"movies_genres\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if movies_genres exists")
	}

	return exists, nil
}
